CC150 - 学习笔记

(一) Arrays ans Strings
1. ArrayList, dynamic resizing array. Commmon implenment way is: whenever the array is full, double the size of the array. Doubling require O(n) time, but it happened so rarely so still consider it have O(1) access
2.StringBuffer 线程安全的， StringBuilder 非线程安全的
3. ASCII 128个unique字符
4. String concat require O(n^2) time
5. String题目通常可以声明一个128长度的int数组，int[] arr = new int[128], 然后每次arr[char]++ 就可以在该char对应的数组位置加一

(二) LinkedList
1.删除节点操作考虑删除head,如果要删除head,直接return head.next()， 要留住一个previous指针初始化为null
2.删除节点可以考虑直接修改里面的数据
3.判断回文的时候可以用栈来存放，不知道链表长短的时候可以用快慢指针来找到中点
4.判断环形指针的时候，快慢指针，假设K步走到环的起始点，环的长度是L，当慢指针走到环的起点的时候，快指针已经进入了环K步了，现在快指针还要追L-K步才能追到慢指针，所以追到的时候，慢指针走到了L-K的地方，快指针也在L-K（K + 2L -2K）的地方,也就是说还差K步走到环的起点，所以这时候把慢指针移到链表的头，快指针不动位置，以同样的速度前进，再相遇的时候就是链表的环的起点。
5.逆转链表几种方法，reverse and clone，新建一个链表，遍历原始链表，把本来下一个的插到新链表前面

(三)Stack and Queue
1. pop有return value，移除并返回。Peek只返回不移除
2. Sort Stack的时候如果可以使用无限个临时栈可以采用merge sort

(四)Tree and Graph
1. Tries 就是每个节点储存一字母，每一个path都是一个单词
2. DFS在树很深的时候不如BFS，BFS适用于找到最短路径，DFS适用于遍历所有的点
3. Pre order遍历是一个DFS的具体例子
4. DFS算法
   void search(Node n){
   	if(n == null) return; 
	visit(n);
	foreach(Node son in n.adjacent){
		if(son.visited == false){
			search(son);
		}
	}
   }
 5. BFS算法
 	void search(Node root){
 		if(root == null) return
 		visit(root);
 		root.visited = true;
 		Queue q = new Queue();
 		q.enqueue(root)
 		while(!queue.isEmpty()){
 			Node temp = q.dequeue();
 			foreach(Node n in temp.adjacent){
 				if(n.visited != true){
 					visit(n);
 					n.visited = true;
 					q.enqueue(n);
 				}				
 			}
 		}
 	}
 6. 一个有向图找到两个节点的路径，DFS实现较简单利用递归，BFS更好的利用在找两点最短路径上。
 7. 创建最小BST的时候要把中点当做root这样保证高度最短，然后递归构造左树和右树还是找sub array里面的中点做root
 8. checkBST 
	 public class Solution {
	 
		public static boolean isValidBST(TreeNode root) {
			return validate(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
		}
	 
		public static boolean validate(TreeNode root, int min, int max) {
			if (root == null) {
				return true;
			}
	 
			// not in range
			if (root.val <= min || root.val >= max) {
				return false;
			}
	 
			// left subtree must be < root.val && right subtree must be > root.val
			return validate(root.left, min, root.val) && validate(root.right, root.val, max);
		}
	}

 9. running time of bfs and dfs is O(V+E):
    "The operations of enqueuing and dequeuing take O(1) time, so the total time devoted to queue operations is O( V). Because the adjacency list of each vertex is scanned only when the vertex is dequeued, each adjacency list is scanned at most once. Since the sum of the lengths of all the adjacency lists is Θ(E), the total time spent in scanning adjacency lists is O( E). The overhead for initialization is O( V), and thus the total running time of BFS is O( V + E)."

    空间的话 dfs多需要o(logn)的栈空间


（四）Bit

 1. Get bits num & (1<<i)
 	Set bits num | (1<<i)

 (九) Dynamic Programming

 1. Recurcive Fib running time is O(2^n),分成几叉就是几的n次方
 2. Dynamic Programming两种方法 Top down : memorization  
 							   Bottom Up: 填格子 

    时间都是 O（n）



	


